
0) Scratchpad
1) Python history and interesting tidbits
2) Python development environment
3) Python variables and conventions
4) Python Fundamentals
    4.0) Fundamental notes
    4.1) Embedding variables in strings
    4.2) Python Data Types
         4.2.1) Strings
    4.3) Python Data Structures
         4.3.0) Data structure fundamentals
         4.3.1) Python Dictionaries aka hashtables
         4.3.2) Python Tuple
5) Python Patterns
         5.0) etc
         5.1) Context managers
         5.2) Conditionals if/else/elif
         5.3) Iteration for / while loops
         5.4) List comprehensions
         5.5) Generator expressions
998) Python characteristics

###############################################
2) Python development environment
###############################################

pip list
python -m pip list
python -m pip install pip==22.3.1
python -m pip install -r ./requirements.txt
python -m IPython   ---> Use IPython as interpretor good for learning and testing code note its case-sensitive
dir(some_var)  ---> when calling dir function it will display __ magic mathods and standard methods available on the var type
type(some_var) ---> Python shows the type of variable eg. string , int note Python is a dynamically vs static typed language

# Create a new python virtual environment and activate it to work in it
python -m myNewVenv
source myNewVenv/bin/activate

# When using iPython for repl you can disable auto-complete via the following
cat ~/.ipython/profile_default/ipython_config.py
c = get_config()
c.TerminalInteractiveShell.autosuggestions_provider = None

###############################################
3) Python variables and conventions
###############################################

__name__ ---> Special magic methods that lead with double underscore aka dunder or magic methods
_name ---> Convention for private special variables that is saying don't use unless you really know why its a private declaration
my_variable_name = "my variable string"  ---> Normal convention for variables is word seperation via underscore charachter
snake_case_lower ---> Used for variable names and functions can use numbers just not first charachter
PascalCase ---> Convention used for python class naming
SNAKE_CASE_UPPER ---> Used for constants
self ---> Used to referance and object in class methods/functions
_ ---> A single under-score is a throw-away variable


###############################################
4) Python Fundamentals
###############################################

=====================================
4.0) Fundamental Notes
=====================================

-------------------------------------
4.0.1) Variables
-------------------------------------

A variable name can contain letters, numbers, or underscores;
A variable name cannot start with a number;
Variables are case-sensitive, i.e., Var and var are two different variables;
No special characters other than underscore _ are allowed;
You can't use reserved keywords as variable names (such as if, while, for, try, ...).

=====================================
4.1) Embedding variables in strings
=====================================

# Format string - Original method using %s substitution characters
my_var = "Hello World"
"This is some string: %s" % my_var
"This is some string: %s %s" % (my_var, "Another substituted string")

# Another legacy method using the .format method
my_var = "Hello World"
"This is some string: {} {}".format(my_var, "helloAgain")

# Current method of using F Strings
my_var = "Hello World"
my_var2 = "Hello Again"
f"This is some string: {my_var} helloAgain"
f"This is a 2 var string: {my_var} {my_var2}"

=====================================
4.2) Python Data Types
=====================================

Strings -->  immutable
Lists --> mutable
tuple --> immutable

-------------------------------------
4.2.1) Strings
-------------------------------------

Python strings are "immutable" which means they cannot be changed 
after they are created (Java strings also use this immutable style).
Since strings can't be changed, we construct *new* strings as we go to
represent computed values. So for example the expression ('hello' + 'there')
takes in the 2 strings 'hello' and 'there' and builds a new string 'hellothere'.

A String in python if concatonating with , a space is put in between 
elements if + they are crammed together

###############################################
4.3) Python Data Structures
###############################################

=====================================
4.3.0) Data structure fundamentals
=====================================


=====================================
4.3.1) Python Dictionaries aka hashtables
=====================================

The dictionaray aka hashtable data structure
is useful for taking in-coherent data and helping
add structure to it eg. Apache log file I want to
organize and see all http 200 counts from a given IP
Google search fundamentally is a giant distributed
hashtable

myDict = {'a' : 'alpha' , 'g' : 'gamma' , 'o' : 'omega' }
for k in sorted(myDict.keys()):
  print('key' , k , '-->' , myDict[k])


=====================================
4.3.2) Python Tuple
=====================================

= Tuple is an immutable list

= You cannot pop , extend or append to the tuple data structure

= Both the below vars are tuples

ip_addr = ("10.1.1.1", "10.1.1.2") - standard notation
ip_addr = "10.1.1.1", "10.1.1.2" - NOT 2 strings the , creates a tuple

###############################################
5) Python Patterns
###############################################

=====================================
5.1) Context Managers
=====================================

= A common pattern is to open something , write to it,
close it eg. Files , database connection , network connection

# Standard method of opening a file without context manager
each operation is done as a manual method against the object

my_file = open("somefile.txt" , mode='w')
data = my_file.read()
my_file.close()

# Performing the same with the context manager pattern

with open("somefile.txt", mode='w') as f:
    data = f.read()


=====================================
5.2) Conditionals if/else/elif
=====================================


=====================================
5.3) Iteration for / while loops
=====================================

=====================================
5.4) List comprehensions
=====================================


=====================================
5.5) Generator expressions
=====================================


###############################################
998) Python characteristics
###############################################

Indentation matters
Use spaces not tabs
PEP8 is Python's convention framework

Python has a garbage collector

Python code interpretation runs in the "moment" each line it evaluates and 
runs , vs a compiled language. Python only checks a line when it runs the line
so if I have symantic errors eg. in an else segment of a statement but else
never gets hit python doesn't care and will run languages such as C or java will not
it checks all lines during compilation and linking before code runs.


